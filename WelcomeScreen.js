import React, { Component } from 'react';
import {AppState,DeviceEventEmitter,
Modal,
  StyleSheet,
  Text,
  View,
Picker,
TextInput,
Dimensions,
  TouchableOpacity,
 TouchableHighlight,
} from 'react-native';
import {ThemeProvider, Toolbar,Button,Checkbox } from 'react-native-material-ui/src';
import PushNotification from 'react-native-push-notification';
import RNGooglePlacePicker from 'react-native-google-place-picker';
const uiTheme = {
     palette: {
         primaryColor: '#7D59C8',
     },
     toolbar: {
         container: {
             height: 50,
         },
     },
 };
const window = Dimensions.get('window');
export default class WelcomeScreen extends Component {

  constructor(props) {
    super(props);
    this.state = {
    distance:'',
      location: null,
       modalVisible: false,
      alarmName:'',
      language:'eng',
       Radius:'0',
       open: false,
       initialPosition: 'unknown',
       initialpoint:null,
       lastPosition:null
    }
  }

    openModal = () => {
      this.setState({open: true});
    }
    closeModal = () => {
        this._handleAppStateChange();
        this.setState({open: false,Radius:'0'});
   }
closeModalWhenOk = ()=>{
this._handleAppStateChange();
 this.setState({open: false});
}

  onPress() {
    RNGooglePlacePicker.show((response) => {
      if (response.didCancel) {
        console.log('User cancelled GooglePlacePicker');
      }
      else if (response.error) {
        console.log('GooglePlacePicker Error: ', response.error);
      }
      else {
        this.setState({
          location: response,
          open: true
        });
        this._handleAppStateChange();
      }
    })
  }
setModalVisible(visible) {
    this.setState({open: true});
  }

  componentDidMount() {
     AppState.addEventListener('change', this._handleAppStateChange);
    navigator.geolocation.getCurrentPosition(
      (position) => {
        var initialPosition = JSON.stringify(position);
        this.setState({initialPosition:initialPosition,
          initialpoint:position
        });
      },
      (error) => alert(JSON.stringify(error)),
      { enableHighAccuracy: true, timeout: 20000, maximumAge: 0 }
    );
    this.watchID = navigator.geolocation.watchPosition((position) => {
      this._handleAppStateChange();  
      this.setState({lastPosition:position});
    });
    
   

  }

  componentWillUnmount() {
    navigator.geolocation.clearWatch(this.watchID);
    AppState.removeEventListener('change', this._handleAppStateChange);
  }

  
  _handleAppStateChange = (appState) => {
     console.log('running in bg',AppState.currentState);
     if(AppState.currentState =='background' || AppState.currentState =='active'){
      console.log('outside app' , this.state.initialpoint, ' this.state.location ', this.state.location  );
        if( this.state.lastPosition != null &&  this.state.location != null){

       /*const lat1=11.191447;
           const lat2 = 11.1085;
           const lon1 =77.268883;
           const lon2 =77.3411;*/
            const lat1=this.state.lastPosition.coords.latitude;
                 const lat2 = this.state.location.latitude;
                 const lon1 =this.state.lastPosition.coords.longitude;
                 const lon2 =this.state.location.longitude;
         const R = 6371; // Radius of the earth in km
         const dLat = deg2rad(lat2-lat1);  // deg2rad below
         const dLon = deg2rad(lon2-lon1);

         const a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon/2) * Math.sin(dLon/2)
         ;
         const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
         const d = R * c; // Distance in km
         console.log('distance',d)
            console.log(d,c,dLat,dLon,lat1,lat2,lon1,lon2)
        if(this.state.Radius>=d){
        console.log('notitfication is working',d)
        PushNotification.localNotification({
             /* Android Only Properties */
           //  id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
             ticker: "Alarm Notification", // (optional)
             autoCancel: false, // (optional) default: true
             largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
             smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
             bigText: "You have entered into a given radius", // (optional) default: "message" prop
             subText: "This is a text", // (optional) default: none
             color: "red", // (optional) default: system default
             vibrate: true, // (optional) default: true
             vibration: 3000, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
             tag: 'some_tag', // (optional) add tag to message
             group: "group", // (optional) add group to message
             //ongoing: false, // (optional) set whether this is an "ongoing" notification



             /* iOS and Android properties */
             title: "Alarm Notification", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
             message: "Alarm Notification!!", // (required)
             playSound: true, // (optional) default: true
             soundName: 'advertising.mp3', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
            // number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
             //repeatType: 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
             //actions: '["Accept", "Reject"]',  // (Android only) See the doc for notification actions to know more
         });
       }
       this.setState({distance: d});
       function deg2rad(deg) {
         return deg * (Math.PI/180)
       }
        }
     }

   }
  getDestinationDetails(){
  console.log('Inside destination ',this.state)
  this.setState({open: false})
   this.watchID = navigator.geolocation.watchPosition((position) => {
        var lastPosition = JSON.stringify(position);
        console.log('lastposition',lastPosition)
        this.setState({lastPosition});
        this._handleAppStateChange();
        console.log('destination details',this.state)
      });

  }
  //get destination lat,lon and track it with current location
   //calculate distance between current and destination location
  render() {
    return (
     <ThemeProvider uiTheme={uiTheme}>
      <View style={styles.container}>
     <Toolbar
                leftElement="add-alarm"
        centerElement="DESTINATION REMINDER"
      />
       <View style={{flex:1,justifyContent:'center'}}>
        <View style={{backgroundColor:'#7D59C8',width:window.width-50,margin:10}}>
           <Button primary raised text="Set alarm" onPress={this.onPress.bind(this)}  />
        </View>
      </View>
        <Modal
                   animationType = {"fade"}
                   transparent = {false}
                   visible = {this.state.open}
                   onRequestClose = {() => {alert("Modal has been closed.")}}>
                   <View style = {styles.modal}>
                      <TextInput
                                     style={{height: 40, borderColor: 'gray', borderWidth: 0,margin:10}}
                                     onChangeText={(alarmName) => this.setState({alarmName})}
                                     value={this.state.alarmName}
                                     placeholder='Alarm Name'
                       />
                      <TextInput
                                     style={{height: 40, borderColor: 'gray', borderWidth: 0,margin:10}}
                                     keyboardType = 'numeric'
                                     onChangeText={(Radius) => this.setState({Radius})}
                                     value={this.state.Radius}
                                     placeholder='Radius in Kms'
                                  />
                       <View style={{flexDirection: 'row',justifyContent:'flex-end',marginLeft:30}}>
                          <View style={{margin:10}}>
                             <Button   primary raised text="Cancel" onPress={this.closeModal}   />
                          </View>
                          <View style={{margin:10}}>
                            <Button primary raised text="Ok" onPress={this.closeModalWhenOk}   />
                          </View>
                      </View>
                   </View>
                </Modal>
      </View>
 </ThemeProvider>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,

    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  location: {
    backgroundColor: 'white',
    margin: 25
  },
   modalContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 70
     },
     modal: {
           backgroundColor:'white',
           justifyContent: 'center',
           marginTop:window.height/3,
           marginLeft:10,
           marginRight:10
        },
        picker:{


        }
});
